import os
from Configure import conf

top = '.'
out = 'build'
samba = os.path.abspath('../samba')

def options(ctx):
    ctx.load('compiler_c')

def configure(ctx):
    # Configure winexe
    ctx.find_program([ a + '-' + p + '-gcc' for a in ['i386', 'i586'] for p in ['mingw32', 'mingw32msvc'] ], var='CC_WIN32')
    ctx.find_program([ a + '-' + p + '-gcc' for a in ['x86_64', 'amd64'] for p in ['mingw32', 'mingw32msvc'] ], var='CC_WIN64')
    ctx.load('compiler_c')

    # Patch Samba files
    os.system('cd ' + samba + ' && sed -i "s/ pyldb-util / /" lib/ldb-samba/wscript_build')

    # Add this file to the samba waf build tree
    os.system('cd ' + samba + ' && grep -q "bld.RECURSE(\'../source\')" wscript_build || sed -i "s#bld.RECURSE(\'source3\')#bld.RECURSE(\'source3\')\\nbld.RECURSE(\'../source\')#" wscript_build')

    print "Now chaining to samba waf configure"
    os.system('cd ' + samba + ' && ./buildtools/bin/waf configure --bundled-libraries=ALL --nonshared-binary=winexe -C')

@conf
def windows_program(self, *k, **kw):
    '''Create task generator for compiling a Windows program
    Set keyword argument cc to the name of the compiler to use.
    '''
    kw['features'] = 'c cprogram'
    kw['env'] = self.env.copy()
    kw['env'].update({"CC": kw['cc'], "LINK_CC": kw['cc']})
    return self(*k, **kw)

def build(bld):
    if bld.env._SAMBA_BUILD_ == 4:
        # We have been called back by samba waf.
        # Create a task generator for winexe
        bld.SAMBA_BINARY (
            binname='winexe',
            source='winexe.c svcinstall.c async.c build/winexesvc32_exe.c build/winexesvc64_exe.c',
            deps='POPT_SAMBA POPT_CREDENTIALS dcerpc')
        return

    # Create task generators for winexe components
    bld.windows_program(target='winexesvc32.exe', source='winexesvc_launch.c winexesvc_loop.c', cc=bld.env.CC_WIN32)
    bld.windows_program(target='winexesvc64.exe', source='winexesvc_launch.c winexesvc_loop.c', cc=bld.env.CC_WIN64)

    bld.program(target='bin2c', source='bin2c.c', cflags='')

    bld(rule='${SRC[0].abspath()} winexesvc32_exe ${SRC[1]} > ${TGT}', target='winexesvc32_exe.c', source='bin2c winexesvc32.exe')
    bld(rule='${SRC[0].abspath()} winexesvc64_exe ${SRC[1]} > ${TGT}', target='winexesvc64_exe.c', source='bin2c winexesvc64.exe')

    # Create task generator for samba + winexe
    bld(rule='cd ' + samba + ' && ./buildtools/bin/waf build --targets=winexe && cp -p bin/winexe ${TGT[0].abspath()}',
        target='winexe',
        source='winexe.c svcinstall.c async.c winexesvc32_exe.c winexesvc64_exe.c')
